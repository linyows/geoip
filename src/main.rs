extern crate maxminddb;

use std::net::IpAddr;
use std::str::FromStr;
use maxminddb::geoip2;
use std::collections::HashMap;

static DB: &'static str = "/usr/local/share/GeoIP/GeoLite2-City.mmdb";

fn flag(name: &str) -> str {
    let mut flags = HashMap::new();
    flags.insert("🇦🇨", "Ascension Island");
    flags.insert("🇦🇩", "Andorra");
    flags.insert("🇦🇪", "United Arab Emirates");
    flags.insert("🇦🇫", "Afghanistan");
    flags.insert("🇦🇬", "Antigua & Barbuda");
    flags.insert("🇦🇮", "Anguilla");
    flags.insert("🇦🇱", "Albania");
    flags.insert("🇦🇲", "Armenia");
    flags.insert("🇦🇴", "Angola");
    flags.insert("🇦🇶", "Antarctica");
    flags.insert("🇦🇷", "Argentina");
    flags.insert("🇦🇸", "American Samoa");
    flags.insert("🇦🇹", "Austria");
    flags.insert("🇦🇺", "Australia");
    flags.insert("🇦🇼", "Aruba");
    flags.insert("🇦🇽", "Åland Islands");
    flags.insert("🇦🇿", "Azerbaijan");
    flags.insert("🇧🇦", "Bosnia & Herzegovina");
    flags.insert("🇧🇧", "Barbados");
    flags.insert("🇧🇩", "Bangladesh");
    flags.insert("🇧🇪", "Belgium");
    flags.insert("🇧🇫", "Burkina Faso");
    flags.insert("🇧🇬", "Bulgaria");
    flags.insert("🇧🇭", "Bahrain");
    flags.insert("🇧🇮", "Burundi");
    flags.insert("🇧🇯", "Benin");
    flags.insert("🇧🇱", "St. Barthélemy");
    flags.insert("🇧🇲", "Bermuda");
    flags.insert("🇧🇳", "Brunei");
    flags.insert("🇧🇴", "Bolivia");
    flags.insert("🇧🇶", "Caribbean Netherlands");
    flags.insert("🇧🇷", "Brazil");
    flags.insert("🇧🇸", "Bahamas");
    flags.insert("🇧🇹", "Bhutan");
    flags.insert("🇧🇻", "Bouvet Island");
    flags.insert("🇧🇼", "Botswana");
    flags.insert("🇧🇾", "Belarus");
    flags.insert("🇧🇿", "Belize");
    flags.insert("🇨🇦", "Canada");
    flags.insert("🇨🇨", "Cocos (Keeling) Islands");
    flags.insert("🇨🇩", "Congo - Kinshasa");
    flags.insert("🇨🇫", "Central African Republic");
    flags.insert("🇨🇬", "Congo - Brazzaville");
    flags.insert("🇨🇭", "Switzerland");
    flags.insert("🇨🇮", "Côte d’Ivoire");
    flags.insert("🇨🇰", "Cook Islands");
    flags.insert("🇨🇱", "Chile");
    flags.insert("🇨🇲", "Cameroon");
    flags.insert("🇨🇳", "China");
    flags.insert("🇨🇴", "Colombia");
    flags.insert("🇨🇵", "Clipperton Island");
    flags.insert("🇨🇷", "Costa Rica");
    flags.insert("🇨🇺", "Cuba");
    flags.insert("🇨🇻", "Cape Verde");
    flags.insert("🇨🇼", "Curaçao");
    flags.insert("🇨🇽", "Christmas Island");
    flags.insert("🇨🇾", "Cyprus");
    flags.insert("🇨🇿", "Czechia");
    flags.insert("🇩🇪", "Germany");
    flags.insert("🇩🇬", "Diego Garcia");
    flags.insert("🇩🇯", "Djibouti");
    flags.insert("🇩🇰", "Denmark");
    flags.insert("🇩🇲", "Dominica");
    flags.insert("🇩🇴", "Dominican Republic");
    flags.insert("🇩🇿", "Algeria");
    flags.insert("🇪🇦", "Ceuta & Melilla");
    flags.insert("🇪🇨", "Ecuador");
    flags.insert("🇪🇪", "Estonia");
    flags.insert("🇪🇬", "Egypt");
    flags.insert("🇪🇭", "Western Sahara");
    flags.insert("🇪🇷", "Eritrea");
    flags.insert("🇪🇸", "Spain");
    flags.insert("🇪🇹", "Ethiopia");
    flags.insert("🇪🇺", "European Union");
    flags.insert("🇫🇮", "Finland");
    flags.insert("🇫🇯", "Fiji");
    flags.insert("🇫🇰", "Falkland Islands");
    flags.insert("🇫🇲", "Micronesia");
    flags.insert("🇫🇴", "Faroe Islands");
    flags.insert("🇫🇷", "France");
    flags.insert("🇬🇦", "Gabon");
    flags.insert("🇬🇧", "United Kingdom");
    flags.insert("🇬🇩", "Grenada");
    flags.insert("🇬🇪", "Georgia");
    flags.insert("🇬🇫", "French Guiana");
    flags.insert("🇬🇬", "Guernsey");
    flags.insert("🇬🇭", "Ghana");
    flags.insert("🇬🇮", "Gibraltar");
    flags.insert("🇬🇱", "Greenland");
    flags.insert("🇬🇲", "Gambia");
    flags.insert("🇬🇳", "Guinea");
    flags.insert("🇬🇵", "Guadeloupe");
    flags.insert("🇬🇶", "Equatorial Guinea");
    flags.insert("🇬🇷", "Greece");
    flags.insert("🇬🇸", "South Georgia & South Sandwich Islands");
    flags.insert("🇬🇹", "Guatemala");
    flags.insert("🇬🇺", "Guam");
    flags.insert("🇬🇼", "Guinea-Bissau");
    flags.insert("🇬🇾", "Guyana");
    flags.insert("🇭🇰", "Hong Kong SAR China");
    flags.insert("🇭🇲", "Heard & McDonald Islands");
    flags.insert("🇭🇳", "Honduras");
    flags.insert("🇭🇷", "Croatia");
    flags.insert("🇭🇹", "Haiti");
    flags.insert("🇭🇺", "Hungary");
    flags.insert("🇮🇨", "Canary Islands");
    flags.insert("🇮🇩", "Indonesia");
    flags.insert("🇮🇪", "Ireland");
    flags.insert("🇮🇱", "Israel");
    flags.insert("🇮🇲", "Isle of Man");
    flags.insert("🇮🇳", "India");
    flags.insert("🇮🇴", "British Indian Ocean Territory");
    flags.insert("🇮🇶", "Iraq");
    flags.insert("🇮🇷", "Iran");
    flags.insert("🇮🇸", "Iceland");
    flags.insert("🇮🇹", "Italy");
    flags.insert("🇯🇪", "Jersey");
    flags.insert("🇯🇲", "Jamaica");
    flags.insert("🇯🇴", "Jordan");
    flags.insert("🇯🇵", "Japan");
    flags.insert("🇰🇪", "Kenya");
    flags.insert("🇰🇬", "Kyrgyzstan");
    flags.insert("🇰🇭", "Cambodia");
    flags.insert("🇰🇮", "Kiribati");
    flags.insert("🇰🇲", "Comoros");
    flags.insert("🇰🇳", "St. Kitts & Nevis");
    flags.insert("🇰🇵", "North Korea");
    flags.insert("🇰🇷", "South Korea");
    flags.insert("🇰🇼", "Kuwait");
    flags.insert("🇰🇾", "Cayman Islands");
    flags.insert("🇰🇿", "Kazakhstan");
    flags.insert("🇱🇦", "Laos");
    flags.insert("🇱🇧", "Lebanon");
    flags.insert("🇱🇨", "St. Lucia");
    flags.insert("🇱🇮", "Liechtenstein");
    flags.insert("🇱🇰", "Sri Lanka");
    flags.insert("🇱🇷", "Liberia");
    flags.insert("🇱🇸", "Lesotho");
    flags.insert("🇱🇹", "Lithuania");
    flags.insert("🇱🇺", "Luxembourg");
    flags.insert("🇱🇻", "Latvia");
    flags.insert("🇱🇾", "Libya");
    flags.insert("🇲🇦", "Morocco");
    flags.insert("🇲🇨", "Monaco");
    flags.insert("🇲🇩", "Moldova");
    flags.insert("🇲🇪", "Montenegro");
    flags.insert("🇲🇫", "St. Martin");
    flags.insert("🇲🇬", "Madagascar");
    flags.insert("🇲🇭", "Marshall Islands");
    flags.insert("🇲🇰", "Macedonia");
    flags.insert("🇲🇱", "Mali");
    flags.insert("🇲🇲", "Myanmar (Burma)");
    flags.insert("🇲🇳", "Mongolia");
    flags.insert("🇲🇴", "Macau Sar China");
    flags.insert("🇲🇵", "Northern Mariana Islands");
    flags.insert("🇲🇶", "Martinique");
    flags.insert("🇲🇷", "Mauritania");
    flags.insert("🇲🇸", "Montserrat");
    flags.insert("🇲🇹", "Malta");
    flags.insert("🇲🇺", "Mauritius");
    flags.insert("🇲🇻", "Maldives");
    flags.insert("🇲🇼", "Malawi");
    flags.insert("🇲🇽", "Mexico");
    flags.insert("🇲🇾", "Malaysia");
    flags.insert("🇲🇿", "Mozambique");
    flags.insert("🇳🇦", "Namibia");
    flags.insert("🇳🇨", "New Caledonia");
    flags.insert("🇳🇪", "Niger");
    flags.insert("🇳🇫", "Norfolk Island");
    flags.insert("🇳🇬", "Nigeria");
    flags.insert("🇳🇮", "Nicaragua");
    flags.insert("🇳🇱", "Netherlands");
    flags.insert("🇳🇴", "Norway");
    flags.insert("🇳🇵", "Nepal");
    flags.insert("🇳🇷", "Nauru");
    flags.insert("🇳🇺", "Niue");
    flags.insert("🇳🇿", "New Zealand");
    flags.insert("🇴🇲", "Oman");
    flags.insert("🇵🇦", "Panama");
    flags.insert("🇵🇪", "Peru");
    flags.insert("🇵🇫", "French Polynesia");
    flags.insert("🇵🇬", "Papua New Guinea");
    flags.insert("🇵🇭", "Philippines");
    flags.insert("🇵🇰", "Pakistan");
    flags.insert("🇵🇱", "Poland");
    flags.insert("🇵🇲", "St. Pierre & Miquelon");
    flags.insert("🇵🇳", "Pitcairn Islands");
    flags.insert("🇵🇷", "Puerto Rico");
    flags.insert("🇵🇸", "Palestinian Territories");
    flags.insert("🇵🇹", "Portugal");
    flags.insert("🇵🇼", "Palau");
    flags.insert("🇵🇾", "Paraguay");
    flags.insert("🇶🇦", "Qatar");
    flags.insert("🇷🇪", "Réunion");
    flags.insert("🇷🇴", "Romania");
    flags.insert("🇷🇸", "Serbia");
    flags.insert("🇷🇺", "Russia");
    flags.insert("🇷🇼", "Rwanda");
    flags.insert("🇸🇦", "Saudi Arabia");
    flags.insert("🇸🇧", "Solomon Islands");
    flags.insert("🇸🇨", "Seychelles");
    flags.insert("🇸🇩", "Sudan");
    flags.insert("🇸🇪", "Sweden");
    flags.insert("🇸🇬", "Singapore");
    flags.insert("🇸🇭", "St. Helena");
    flags.insert("🇸🇮", "Slovenia");
    flags.insert("🇸🇯", "Svalbard & Jan Mayen");
    flags.insert("🇸🇰", "Slovakia");
    flags.insert("🇸🇱", "Sierra Leone");
    flags.insert("🇸🇲", "San Marino");
    flags.insert("🇸🇳", "Senegal");
    flags.insert("🇸🇴", "Somalia");
    flags.insert("🇸🇷", "Suriname");
    flags.insert("🇸🇸", "South Sudan");
    flags.insert("🇸🇹", "São Tomé & Príncipe");
    flags.insert("🇸🇻", "El Salvador");
    flags.insert("🇸🇽", "Sint Maarten");
    flags.insert("🇸🇾", "Syria");
    flags.insert("🇸🇿", "Swaziland");
    flags.insert("🇹🇦", "Tristan Da Cunha");
    flags.insert("🇹🇨", "Turks & Caicos Islands");
    flags.insert("🇹🇩", "Chad");
    flags.insert("🇹🇫", "French Southern Territories");
    flags.insert("🇹🇬", "Togo");
    flags.insert("🇹🇭", "Thailand");
    flags.insert("🇹🇯", "Tajikistan");
    flags.insert("🇹🇰", "Tokelau");
    flags.insert("🇹🇱", "Timor-Leste");
    flags.insert("🇹🇲", "Turkmenistan");
    flags.insert("🇹🇳", "Tunisia");
    flags.insert("🇹🇴", "Tonga");
    flags.insert("🇹🇷", "Turkey");
    flags.insert("🇹🇹", "Trinidad & Tobago");
    flags.insert("🇹🇻", "Tuvalu");
    flags.insert("🇹🇼", "Taiwan");
    flags.insert("🇹🇿", "Tanzania");
    flags.insert("🇺🇦", "Ukraine");
    flags.insert("🇺🇬", "Uganda");
    flags.insert("🇺🇲", "U.S. Outlying Islands");
    flags.insert("🇺🇳", "United Nations");
    flags.insert("🇺🇸", "United States");
    flags.insert("🇺🇾", "Uruguay");
    flags.insert("🇺🇿", "Uzbekistan");
    flags.insert("🇻🇦", "Vatican City");
    flags.insert("🇻🇨", "St. Vincent & Grenadines");
    flags.insert("🇻🇪", "Venezuela");
    flags.insert("🇻🇬", "British Virgin Islands");
    flags.insert("🇻🇮", "U.S. Virgin Islands");
    flags.insert("🇻🇳", "Vietnam");
    flags.insert("🇻🇺", "Vanuatu");
    flags.insert("🇼🇫", "Wallis & Futuna");
    flags.insert("🇼🇸", "Samoa");
    flags.insert("🇽🇰", "Kosovo");
    flags.insert("🇾🇪", "Yemen");
    flags.insert("🇾🇹", "Mayotte");
    flags.insert("🇿🇦", "South Africa");
    flags.insert("🇿🇲", "Zambia");
    flags.insert("🇿🇼", "Zimbabwe");
    flags.insert("🏴󠁧󠁢󠁥󠁮󠁧󠁿", "England");
    flags.insert("🏴󠁧󠁢󠁳󠁣󠁴󠁿", "Scotland");
    flags.insert("🏴󠁧󠁢󠁷󠁬󠁳󠁿", "Wales");

    let mut f = HashMap::new();
    for (k, v) in flags.iter() {
        f.insert(v, k);
    }
    f.get(name);
}

fn main() {
    let args: Vec<String> = std::env::args().collect();
    let input = &args[1];
    let ip: IpAddr = FromStr::from_str(input).unwrap();

    let r = maxminddb::Reader::open_readfile(DB);
    if let Err(err) = r {
        panic!(format!("error opening mmdb: {:?}", err));
    }
    let record: geoip2::City = r.unwrap().lookup(ip).unwrap();
    println!("{:?}", record);
    println!("{}/{}", record.country.unwrap().names.unwrap().get("en").unwrap(), record.city.unwrap().names.unwrap().get("en").unwrap());
    flag("Japan");
}

